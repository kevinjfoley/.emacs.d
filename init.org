#+PROPERTY: header-args:emacs-lisp :tangle yes
* Setup
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- user-init-file                    -*- lexical-binding: t -*-
  ;;; Early birds
  (progn ;     startup
    (defvar before-user-init-time (current-time)
      "Value of `current-time' when Emacs begins loading `user-init-file'.")
    (message "Loading Emacs...done (%.3fs)"
             (float-time (time-subtract before-user-init-time
                                        before-init-time)))
    (setq user-init-file (or load-file-name buffer-file-name))
    (setq user-emacs-directory (file-name-directory user-init-file))
    (message "Loading %s..." user-init-file)
    (setq package-enable-at-startup nil)
    (setq inhibit-startup-buffer-menu t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message "kevin")
    (setq initial-buffer-choice t)
    (setq initial-scratch-message "")
    (setq load-prefer-newer t)
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (add-to-list 'exec-path "/home/kevin/anaconda/bin"))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (progn ;    `borg'
    (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
    (require  'borg)
    (borg-initialize))

  (progn ;    `use-package'
    (require  'use-package)
    (setq use-package-verbose t))

  (use-package auto-compile
    :demand t
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode)
    (setq auto-compile-display-buffer               nil)
    (setq auto-compile-mode-line-counter            t)
    (setq auto-compile-source-recreate-deletes-dest t)
    (setq auto-compile-toggle-deletes-nonlib-dest   t)
    (setq auto-compile-update-autoloads             t)
    (add-hook 'auto-compile-inhibit-compile-hook
              'auto-compile-inhibit-compile-detached-git-head))

  (use-package epkg
    :defer t
    :init (setq epkg-repository
                (expand-file-name "var/epkgs/" user-emacs-directory)))

  (use-package custom
    :config
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (use-package server
    :config (or (server-running-p) (server-mode)))

  (progn ;     startup
    (message "Loading early birds...done (%.3fs)"
             (float-time (time-subtract (current-time)
                                        before-user-init-time))))

#+END_SRC
* Borg init.el
#+BEGIN_SRC emacs-lisp
  ;;; Long tail

  (use-package dash
    :config (dash-enable-font-lock))

  (use-package diff-hl
    :config
    (setq diff-hl-draw-borders nil)
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t))

  (use-package dired
    :defer t
    :config (setq dired-listing-switches "-alh"))

  (use-package eldoc
    :config (global-eldoc-mode))

  (use-package help
    :defer t
    :config (temp-buffer-resize-mode))

  (progn ;    `isearch'
    (setq isearch-allow-scroll t))

  (use-package lisp-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
    (defun indent-spaces-mode ()
      (setq indent-tabs-mode nil))
    (add-hook 'lisp-interaction-mode-hook #'indent-spaces-mode))

  (use-package magit
    :defer t
    :bind (("C-x g"   . magit-status)
           ("C-x M-g" . magit-dispatch-popup))
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-pushremote
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-pushremote
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-submodules
                            'magit-insert-unpulled-from-upstream))

  (use-package man
    :defer t
    :config (setq Man-width 80))

  (use-package paren
    :config (show-paren-mode))

  (use-package prog-mode
    :config (global-prettify-symbols-mode)
    (defun indicate-buffer-boundaries-left ()
      (setq indicate-buffer-boundaries 'left))
    (add-hook 'prog-mode-hook #'indicate-buffer-boundaries-left))

  (use-package recentf
    :demand t
    :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?:"))

  (use-package savehist
    :config (savehist-mode))

  (use-package saveplace
    :config (save-place-mode))

  (use-package simple
    :config (column-number-mode))

  (progn ;    `text-mode'
    (add-hook 'text-mode-hook #'indicate-buffer-boundaries-left))

  (use-package tramp
    :defer t
    :config
    (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
    (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
    (add-to-list 'tramp-default-proxies-alist
                 (list (regexp-quote (system-name)) nil nil)))

  (use-package solarized-theme
    :config
    (load-theme 'solarized-dark t))

  (use-package org
    :defer t
    :init
    (add-hook 'org-mode-hook #'visual-line-mode) ;Wraps text based on word boundries
    :config
    (setq org-startup-indented t)         ; Cleaner look
    (setq org-log-done t)
    (progn
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (shell . t)))))


  (use-package company                    ; Graphical (auto-)completion
    :init
    (global-company-mode)
    :config
    (setq
     company-tooltip-align-annotations t
     company-tooltip-flip-when-above t
     ;; Easy navigation to candidates with M-<n>
     company-show-numbers t
     company-minimum-prefix-length 3
     company-idle-delay 1)
    :bind (:map company-active-map
                ;; Use C-n and C-p to navigate suggestions
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)))

  (use-package elpy
    :defer t
    :init
    (add-hook 'python-mode-hook #'elpy-mode)
    (setq elpy-rpc-backend "jedi"))

  (use-package ace-window
    :defer t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :bind*
    ("M-p" . ace-window))

  (use-package ivy                        ; Minibuffer completion
    :defer t
    :init (ivy-mode 1)
    :bind (
           ("C-c b r" . ivy-resume)
           ("C-s" . swiper))
    :config
    ;; Include recentf and bookmarks to switch buffer, and tune the count format.
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          enable-recursive-minibuffers t
          ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))      ;Uses flx-more matches, better sorting
    :diminish ivy-mode)

#+END_SRC
* EOF
#+BEGIN_SRC emacs-lisp
(progn ;     startup
  (message "Loading %s...done (%.3fs)" user-init-file
           (float-time (time-subtract (current-time)
                                      before-user-init-time)))
  (add-hook 'after-init-hook
            (lambda ()
              (message
               "Loading %s...done (%.3fs) [after-init]" user-init-file
               (float-time (time-subtract (current-time)
                                          before-user-init-time))))
            t))

(progn ;     personalize
  (let ((file (expand-file-name (concat (user-real-login-name) ".el")
                                user-emacs-directory)))
    (when (file-exists-p file)
      (load file))))

(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; init.el ends here
#+END_SRC
* Local Variables
Source: eschwab
Create a buffer-local after-save-hook to tangle the lisp.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
